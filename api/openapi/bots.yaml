openapi: 3.0.3
info:
  title: ITS Reg
  description: "ITS Reg"
  version: 1.0.0
servers:
  - url: 'http://{hostname}:8400/api'
    variables:
      hostname:
        default: localhost
security:
  - bearerAuth: []

paths:
  /bots:
    put:
      operationId: createBot
      description: "Создать или заменить существующего бота с данным UUID."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBots'
      responses:
        201:
          description: "Бот успешно создан."
        401:
          description: "Не был указан JWT токен."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      operationId: getBots
      description: "Получить информацию о ботах."
      responses:
        200:
          description: "Успешно получена информация о ботах."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBots'
        401:
          description: "Не был указан JWT токен."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bots/{uuid}:
    get:
      operationId: getBot
      description: "Получить информацию о боте с указанным UUID."
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            example: 14ab-d740
          required: true
          description: "Уникальный UUID бота."
      responses:
        200:
          description: "Бот найден."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        401:
          description: "Не был указан JWT токен."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: "Нет доступа к боту с данным UUID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: "Бот с данным UUID не найден."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bots/{uuid}/answers:
    get:
      operationId: getAnswers
      description: "Получить ответы участников на бота с данным UUID в формате CSV."
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            example: 14ab-d740
          required: true
          description: "Уникальный UUID бота."
      responses:
        200:
          description: "Успешно получены ответы участников."
          content:
            text/csv: { }
        401:
          description: "Не был указан JWT токен."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: "Нет доступа к боту с данным UUID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: "Бот с данным UUID не найден."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bots/{uuid}/start:
    post:
      operationId: startBot
      description: "Отправить запрос на запуск бота с данным UUID."
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            example: 14ab-d740
          required: true
          description: "Уникальный UUID бота."
      responses:
        200:
          description: "Успешно отправлен запрос на запуск бота."
        401:
          description: "Не был указан JWT токен."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: "Нет доступа к боту с данным UUID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: "Бот с данным UUID не найден."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bots/{uuid}/stop:
    post:
      operationId: stopBot
      description: "Отправить запрос на остановку бота с данным UUID."
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            example: 14ab-d740
            description: "Bot's UUID"
          required: true
          description: "Уникальный UUID бота."
      responses:
        200:
          description: "Успешно отправлен запрос на остановку бота."
        401:
          description: "Не был указан JWT токен."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: "Нет доступа к боту с данным UUID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: "Бот с данным UUID не найден."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bots/{uuid}/mailings/{entryKey}/start:
    post:
      operationId: startMailing
      description: "Начать рассылку с бота данным UUID и ключом entryKey."
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            default: Bot's UUID
          required: true
          description: "Уникальный UUID бота."
        - in: path
          name: entryKey
          schema:
            type: string
            default: Mailing's entry key
          required: true
          description: "Уникальный ключ рассылки бота."
      responses:
        200:
          description: "TODO"
        401:
          description: "Не был указан JWT токен."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: "Нет доступа к боту с данным UUID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: "Бот с данным UUID или рассылка с ключом не найдены."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Option:
      description: "Опция для блока с выбором ответа. Представлена в telegram как кнопка в клавиатуре (ReplyKeyboard)."
      type: object
      required:
        - text
        - next
      properties:
        text:
          type: string
          description: "Текст на кнопке."
          example: "Опция А"
        next:
          type: integer
          description: "Состояние (state) следующего блока, если пользователь выбрал данную опцию."
          example: 2

    Block:
      description: >
        Минимальная структурная единица сценария бота. Представляет из себя сообщение, которое отправляет бот пользователю, и в зависимости от типа блока обрабатывается по-разному:
         - Сообщение (message) - просто сообщение от бота. Не ждет ответа пользователя и сразу переключает пользователя на следующий блок с состоянием next.
         - Вопрос (question) - сообщение от бот, ожидается ответ пользователя. После ответа пользователя переключает пользователя на следующий блок с состоянием next
         - Выбор (selection) - сообщение от бота, после которого ожидается ответ пользователя кнопкой или произвольным текстом. Если пользователь отвечает кнопкой, бот переключает его на следующий блок с состоянием next у выбранной опции (Option). Если пользователь отвечает произвольным текстом, переключает пользователя на следующий блок с состоянием next.
      type: object
      required:
        - type
        - state
        - nextState
        - title
        - text
      properties:
        type:
          description: >
            Тип кнопки:
             - Сообщение (message) - просто сообщение от бота. Не ждет ответа пользователя и сразу переключает пользователя на следующий блок с состоянием next.
             - Вопрос (question) - сообщение от бот, ожидается ответ пользователя. После ответа пользователя переключает пользователя на следующий блок с состоянием next
             - Выбор (selection) - сообщение от бота, после которого ожидается ответ пользователя кнопкой или произвольным текстом. Если пользователь отвечает кнопкой, бот переключает его на следующий блок с состоянием next у выбранной опции (Option). Если пользователь отвечает произвольным текстом, переключает пользователя на следующий блок с состоянием next.
          type: string
          enum:
            - message
            - question
            - selection
          example: message
        state:
          description: "Уникальный идентификатор блока в рамках бота. Не может равняться нулю."
          type: integer
          example: 1
        nextState:
          description: "Состояние (state) другого блока. Конкретное значение определяется типом (type) блока."
          type: integer
          example: 2
        title:
          description: "Название блока. Используется в заголовке таблицы с ответами участников."
          type: string
          example: Greeting
        text:
          description: "Текст сообщения бота. Не допускается использование вёрстки."
          type: string
          example: Hello, user!
        options:
          description: "Опции для блока с выбором ответа. Не допускается использование опций для других типов блока."
          type: array
          items:
            $ref: '#/components/schemas/Option'

    EntryPoint:
      description:
        Точка входа для бота. Бот должен иметь как минимум точку входа "start". Иные точки входа используются для создания рассылок.
        Точка входа начинает скрипт бота с отправки блока с состоянием state пользователю.
      type: object
      required:
        - key
        - state
      properties:
        key:
          description: "Уникальный ключ точки входа бота."
          type: string
          example: start
        state:
          description: "Состояние (state) первого блока в скрипте."
          type: integer
          example: 1

    Mailing:
      description: "Рассылка от бота. При старте рассылки активирует точку входа с ключом entryKey всем пользователям, прошедшим блок с состоянием requiredState."
      type: object
      required:
        - name
        - entryKey
        - requiredState
      properties:
        name:
          description: "Имя рассылки."
          type: string
          example: "Рассылка для завершивших скрипт бота."
        entryKey:
          description: "Ключ точки входа (EntryPoint), которая активируется при старте рассылки."
          type: string
          example: mailing-1
        requiredState:
          description: "Состояние (state) блока, требуемого для отправки рассылки или 0, для всех, кто завершил скрипт. Так, requiredState = 5 обозначает, что рассылка будет отправлена всем участникам, которые ответили на блок с состоянием 5."
          type: integer
          example: 0

    Bot:
      description: "Информация о боте."
      type: object
      required:
        - botUUID
        - name
        - token
        - status
        - entries
        - blocks
        - createdAt
        - updatedAt
      properties:
        botUUID:
          description: "Уникальный идентификатор бота. Не должен превышать длину в 36 символов."
          type: string
          example: 14ab-d740
        name:
          description: "Имя бота."
          type: string
          example: Example bot
        token:
          description: "Телеграм токен бота. Получить токен можно в телеграм-боте @BotFather."
          type: string
        status:
          description: "Статус бота: started (запущен), stopped (не запущен), failed (ошибка запуска)."
          type: string
          enum:
            - started
            - stopped
            - failed
        entries:
          description: "Все точки входа бота, см. EntryPoint. Гарантировано существует точка входа start"
          type: array
          items:
            $ref: '#/components/schemas/EntryPoint'
        mailings:
          description: "Все рассылки бота, см. Mailings."
          type: array
          items:
            $ref: '#/components/schemas/Mailing'
        blocks:
          description: "Все блоки бота, см. Block."
          type: array
          items:
            $ref: '#/components/schemas/Block'
        createdAt:
          description: "Время создания бота."
          type: string
          format: date-time
        updatedAt:
          description: "Время последнего обновления бота."
          type: string
          format: date-time

    PostBots:
      description: "Данные, необходимые для создания бота."
      type: object
      required:
        - botUUID
        - name
        - token
        - entries
        - blocks
      properties:
        botUUID:
          description: "Уникальный идентификатор бота. Не должен превышать длину в 36 символов."
          type: string
          example: 14ab-d740
        name:
          description: "Имя бота."
          type: string
          example: Example bot
        token:
          description: "Телеграм токен бота. Получить токен можно в телеграм-боте @BotFather."
          type: string
        entries:
          description: "Все точки входа бота, см. EntryPoint. Необходимо наличие точки входа start."
          type: array
          items:
            $ref: '#/components/schemas/EntryPoint'
        mailings:
          description: "Все рассылки бота, см. Mailings."
          type: array
          items:
            $ref: '#/components/schemas/Mailing'
        blocks:
          description: "Все блоки бота, см. Block."
          type: array
          items:
            $ref: '#/components/schemas/Block'

    GetBots:
      description: "Список ботов."
      type: array
      items:
        $ref: '#/components/schemas/Bot'

    Error:
      description: "Описание ошибки."
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: error message
